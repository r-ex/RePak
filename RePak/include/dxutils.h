#pragma once

#include <d3d11.h>
#include <map>
#include <string>

static std::map<DXGI_FORMAT, std::string> _dxgi_to_string = {
	{DXGI_FORMAT_UNKNOWN, "DXGI_FORMAT_UNKNOWN"},
	{DXGI_FORMAT_R32G32B32A32_TYPELESS, "DXGI_FORMAT_R32G32B32A32_TYPELESS"},
	{DXGI_FORMAT_R32G32B32A32_FLOAT, "DXGI_FORMAT_R32G32B32A32_FLOAT"},
	{DXGI_FORMAT_R32G32B32A32_UINT, "DXGI_FORMAT_R32G32B32A32_UINT"},
	{DXGI_FORMAT_R32G32B32A32_SINT, "DXGI_FORMAT_R32G32B32A32_SINT"},
	{DXGI_FORMAT_R32G32B32_TYPELESS, "DXGI_FORMAT_R32G32B32_TYPELESS"},
	{DXGI_FORMAT_R32G32B32_FLOAT, "DXGI_FORMAT_R32G32B32_FLOAT"},
	{DXGI_FORMAT_R32G32B32_UINT, "DXGI_FORMAT_R32G32B32_UINT"},
	{DXGI_FORMAT_R32G32B32_SINT, "DXGI_FORMAT_R32G32B32_SINT"},
	{DXGI_FORMAT_R16G16B16A16_TYPELESS, "DXGI_FORMAT_R16G16B16A16_TYPELESS"},
	{DXGI_FORMAT_R16G16B16A16_FLOAT, "DXGI_FORMAT_R16G16B16A16_FLOAT"},
	{DXGI_FORMAT_R16G16B16A16_UNORM, "DXGI_FORMAT_R16G16B16A16_UNORM"},
	{DXGI_FORMAT_R16G16B16A16_UINT, "DXGI_FORMAT_R16G16B16A16_UINT"},
	{DXGI_FORMAT_R16G16B16A16_SNORM, "DXGI_FORMAT_R16G16B16A16_SNORM"},
	{DXGI_FORMAT_R16G16B16A16_SINT, "DXGI_FORMAT_R16G16B16A16_SINT"},
	{DXGI_FORMAT_R32G32_TYPELESS, "DXGI_FORMAT_R32G32_TYPELESS"},
	{DXGI_FORMAT_R32G32_FLOAT, "DXGI_FORMAT_R32G32_FLOAT"},
	{DXGI_FORMAT_R32G32_UINT, "DXGI_FORMAT_R32G32_UINT"},
	{DXGI_FORMAT_R32G32_SINT, "DXGI_FORMAT_R32G32_SINT"},
	{DXGI_FORMAT_R32G8X24_TYPELESS, "DXGI_FORMAT_R32G8X24_TYPELESS"},
	{DXGI_FORMAT_D32_FLOAT_S8X24_UINT, "DXGI_FORMAT_D32_FLOAT_S8X24_UINT"},
	{DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, "DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS"},
	{DXGI_FORMAT_X32_TYPELESS_G8X24_UINT, "DXGI_FORMAT_X32_TYPELESS_G8X24_UINT"},
	{DXGI_FORMAT_R10G10B10A2_TYPELESS, "DXGI_FORMAT_R10G10B10A2_TYPELESS"},
	{DXGI_FORMAT_R10G10B10A2_UNORM, "DXGI_FORMAT_R10G10B10A2_UNORM"},
	{DXGI_FORMAT_R10G10B10A2_UINT, "DXGI_FORMAT_R10G10B10A2_UINT"},
	{DXGI_FORMAT_R11G11B10_FLOAT, "DXGI_FORMAT_R11G11B10_FLOAT"},
	{DXGI_FORMAT_R8G8B8A8_TYPELESS, "DXGI_FORMAT_R8G8B8A8_TYPELESS"},
	{DXGI_FORMAT_R8G8B8A8_UNORM, "DXGI_FORMAT_R8G8B8A8_UNORM"},
	{DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, "DXGI_FORMAT_R8G8B8A8_UNORM_SRGB"},
	{DXGI_FORMAT_R8G8B8A8_UINT, "DXGI_FORMAT_R8G8B8A8_UINT"},
	{DXGI_FORMAT_R8G8B8A8_SNORM, "DXGI_FORMAT_R8G8B8A8_SNORM"},
	{DXGI_FORMAT_R8G8B8A8_SINT, "DXGI_FORMAT_R8G8B8A8_SINT"},
	{DXGI_FORMAT_R16G16_TYPELESS, "DXGI_FORMAT_R16G16_TYPELESS"},
	{DXGI_FORMAT_R16G16_FLOAT, "DXGI_FORMAT_R16G16_FLOAT"},
	{DXGI_FORMAT_R16G16_UNORM, "DXGI_FORMAT_R16G16_UNORM"},
	{DXGI_FORMAT_R16G16_UINT, "DXGI_FORMAT_R16G16_UINT"},
	{DXGI_FORMAT_R16G16_SNORM, "DXGI_FORMAT_R16G16_SNORM"},
	{DXGI_FORMAT_R16G16_SINT, "DXGI_FORMAT_R16G16_SINT"},
	{DXGI_FORMAT_R32_TYPELESS, "DXGI_FORMAT_R32_TYPELESS"},
	{DXGI_FORMAT_D32_FLOAT, "DXGI_FORMAT_D32_FLOAT"},
	{DXGI_FORMAT_R32_FLOAT, "DXGI_FORMAT_R32_FLOAT"},
	{DXGI_FORMAT_R32_UINT, "DXGI_FORMAT_R32_UINT"},
	{DXGI_FORMAT_R32_SINT, "DXGI_FORMAT_R32_SINT"},
	{DXGI_FORMAT_R24G8_TYPELESS, "DXGI_FORMAT_R24G8_TYPELESS"},
	{DXGI_FORMAT_D24_UNORM_S8_UINT, "DXGI_FORMAT_D24_UNORM_S8_UINT"},
	{DXGI_FORMAT_R24_UNORM_X8_TYPELESS, "DXGI_FORMAT_R24_UNORM_X8_TYPELESS"},
	{DXGI_FORMAT_X24_TYPELESS_G8_UINT, "DXGI_FORMAT_X24_TYPELESS_G8_UINT"},
	{DXGI_FORMAT_R8G8_TYPELESS, "DXGI_FORMAT_R8G8_TYPELESS"},
	{DXGI_FORMAT_R8G8_UNORM, "DXGI_FORMAT_R8G8_UNORM"},
	{DXGI_FORMAT_R8G8_UINT, "DXGI_FORMAT_R8G8_UINT"},
	{DXGI_FORMAT_R8G8_SNORM, "DXGI_FORMAT_R8G8_SNORM"},
	{DXGI_FORMAT_R8G8_SINT, "DXGI_FORMAT_R8G8_SINT"},
	{DXGI_FORMAT_R16_TYPELESS, "DXGI_FORMAT_R16_TYPELESS"},
	{DXGI_FORMAT_R16_FLOAT, "DXGI_FORMAT_R16_FLOAT"},
	{DXGI_FORMAT_D16_UNORM, "DXGI_FORMAT_D16_UNORM"},
	{DXGI_FORMAT_R16_UNORM, "DXGI_FORMAT_R16_UNORM"},
	{DXGI_FORMAT_R16_UINT, "DXGI_FORMAT_R16_UINT"},
	{DXGI_FORMAT_R16_SNORM, "DXGI_FORMAT_R16_SNORM"},
	{DXGI_FORMAT_R16_SINT, "DXGI_FORMAT_R16_SINT"},
	{DXGI_FORMAT_R8_TYPELESS, "DXGI_FORMAT_R8_TYPELESS"},
	{DXGI_FORMAT_R8_UNORM, "DXGI_FORMAT_R8_UNORM"},
	{DXGI_FORMAT_R8_UINT, "DXGI_FORMAT_R8_UINT"},
	{DXGI_FORMAT_R8_SNORM, "DXGI_FORMAT_R8_SNORM"},
	{DXGI_FORMAT_R8_SINT, "DXGI_FORMAT_R8_SINT"},
	{DXGI_FORMAT_A8_UNORM, "DXGI_FORMAT_A8_UNORM"},
	{DXGI_FORMAT_R1_UNORM, "DXGI_FORMAT_R1_UNORM"},
	{DXGI_FORMAT_R9G9B9E5_SHAREDEXP, "DXGI_FORMAT_R9G9B9E5_SHAREDEXP"},
	{DXGI_FORMAT_R8G8_B8G8_UNORM, "DXGI_FORMAT_R8G8_B8G8_UNORM"},
	{DXGI_FORMAT_G8R8_G8B8_UNORM, "DXGI_FORMAT_G8R8_G8B8_UNORM"},
	{DXGI_FORMAT_BC1_TYPELESS, "DXGI_FORMAT_BC1_TYPELESS"},
	{DXGI_FORMAT_BC1_UNORM, "DXGI_FORMAT_BC1_UNORM"},
	{DXGI_FORMAT_BC1_UNORM_SRGB, "DXGI_FORMAT_BC1_UNORM_SRGB"},
	{DXGI_FORMAT_BC2_TYPELESS, "DXGI_FORMAT_BC2_TYPELESS"},
	{DXGI_FORMAT_BC2_UNORM, "DXGI_FORMAT_BC2_UNORM"},
	{DXGI_FORMAT_BC2_UNORM_SRGB, "DXGI_FORMAT_BC2_UNORM_SRGB"},
	{DXGI_FORMAT_BC3_TYPELESS, "DXGI_FORMAT_BC3_TYPELESS"},
	{DXGI_FORMAT_BC3_UNORM, "DXGI_FORMAT_BC3_UNORM"},
	{DXGI_FORMAT_BC3_UNORM_SRGB, "DXGI_FORMAT_BC3_UNORM_SRGB"},
	{DXGI_FORMAT_BC4_TYPELESS, "DXGI_FORMAT_BC4_TYPELESS"},
	{DXGI_FORMAT_BC4_UNORM, "DXGI_FORMAT_BC4_UNORM"},
	{DXGI_FORMAT_BC4_SNORM, "DXGI_FORMAT_BC4_SNORM"},
	{DXGI_FORMAT_BC5_TYPELESS, "DXGI_FORMAT_BC5_TYPELESS"},
	{DXGI_FORMAT_BC5_UNORM, "DXGI_FORMAT_BC5_UNORM"},
	{DXGI_FORMAT_BC5_SNORM, "DXGI_FORMAT_BC5_SNORM"},
	{DXGI_FORMAT_B5G6R5_UNORM, "DXGI_FORMAT_B5G6R5_UNORM"},
	{DXGI_FORMAT_B5G5R5A1_UNORM, "DXGI_FORMAT_B5G5R5A1_UNORM"},
	{DXGI_FORMAT_B8G8R8A8_UNORM, "DXGI_FORMAT_B8G8R8A8_UNORM"},
	{DXGI_FORMAT_B8G8R8X8_UNORM, "DXGI_FORMAT_B8G8R8X8_UNORM"},
	{DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, "DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM"},
	{DXGI_FORMAT_B8G8R8A8_TYPELESS, "DXGI_FORMAT_B8G8R8A8_TYPELESS"},
	{DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, "DXGI_FORMAT_B8G8R8A8_UNORM_SRGB"},
	{DXGI_FORMAT_B8G8R8X8_TYPELESS, "DXGI_FORMAT_B8G8R8X8_TYPELESS"},
	{DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, "DXGI_FORMAT_B8G8R8X8_UNORM_SRGB"},
	{DXGI_FORMAT_BC6H_TYPELESS, "DXGI_FORMAT_BC6H_TYPELESS"},
	{DXGI_FORMAT_BC6H_UF16, "DXGI_FORMAT_BC6H_UF16"},
	{DXGI_FORMAT_BC6H_SF16, "DXGI_FORMAT_BC6H_SF16"},
	{DXGI_FORMAT_BC7_TYPELESS, "DXGI_FORMAT_BC7_TYPELESS"},
	{DXGI_FORMAT_BC7_UNORM, "DXGI_FORMAT_BC7_UNORM"},
	{DXGI_FORMAT_BC7_UNORM_SRGB, "DXGI_FORMAT_BC7_UNORM_SRGB"},
	{DXGI_FORMAT_AYUV, "DXGI_FORMAT_AYUV"},
	{DXGI_FORMAT_Y410, "DXGI_FORMAT_Y410"},
	{DXGI_FORMAT_Y416, "DXGI_FORMAT_Y416"},
	{DXGI_FORMAT_NV12, "DXGI_FORMAT_NV12"},
	{DXGI_FORMAT_P010, "DXGI_FORMAT_P010"},
	{DXGI_FORMAT_P016, "DXGI_FORMAT_P016"},
	{DXGI_FORMAT_420_OPAQUE, "DXGI_FORMAT_420_OPAQUE"},
	{DXGI_FORMAT_YUY2, "DXGI_FORMAT_YUY2"},
	{DXGI_FORMAT_Y210, "DXGI_FORMAT_Y210"},
	{DXGI_FORMAT_Y216, "DXGI_FORMAT_Y216"},
	{DXGI_FORMAT_NV11, "DXGI_FORMAT_NV11"},
	{DXGI_FORMAT_AI44, "DXGI_FORMAT_AI44"},
	{DXGI_FORMAT_IA44, "DXGI_FORMAT_IA44"},
	{DXGI_FORMAT_P8, "DXGI_FORMAT_P8"},
	{DXGI_FORMAT_A8P8, "DXGI_FORMAT_A8P8"},
	{DXGI_FORMAT_B4G4R4A4_UNORM, "DXGI_FORMAT_B4G4R4A4_UNORM"},
	{DXGI_FORMAT_P208, "DXGI_FORMAT_P208"},
	{DXGI_FORMAT_V208, "DXGI_FORMAT_V208"},
	{DXGI_FORMAT_V408, "DXGI_FORMAT_V408"},
	{DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE, "DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE"},
	{DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE, "DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE"},
	{DXGI_FORMAT_FORCE_UINT, "DXGI_FORMAT_FORCE_UINT"},
};

struct DDS_PIXELFORMAT {
	DWORD dwSize;
	DWORD dwFlags;
	uint32_t dwFourCC;
	DWORD dwRGBBitCount;
	DWORD dwRBitMask;
	DWORD dwGBitMask;
	DWORD dwBBitMask;
	DWORD dwABitMask;
};

typedef struct {
	DWORD           dwSize;
	DWORD           dwFlags;
	DWORD           dwHeight;
	DWORD           dwWidth;
	DWORD           dwPitchOrLinearSize;
	DWORD           dwDepth;
	DWORD           dwMipMapCount;
	DWORD           dwReserved1[11];
	DDS_PIXELFORMAT ddspf;
	DWORD           dwCaps;
	DWORD           dwCaps2;
	DWORD           dwCaps3;
	DWORD           dwCaps4;
	DWORD           dwReserved2;
} DDS_HEADER;

struct DDS_HEADER_DXT10 {
	DXGI_FORMAT              dxgiFormat;
	D3D10_RESOURCE_DIMENSION resourceDimension;
	UINT                     miscFlag;
	UINT                     arraySize;
	UINT                     miscFlags2;
};

// pixelformat flags
#define DDPF_ALPHAPIXELS 0x1
#define DDPF_ALPHA 0x2
#define DDPF_FOURCC 0x4
#define DDPF_RGB 0x40
#define DDPF_YUV 0x200
#define DDPF_LUMINANCE 0x20000

// dds flags
#define DDS_FOURCC DDPF_FOURCC
#define DDS_ALPHA DDPF_ALPHA
#define DDS_RGB DDPF_RGB
#define DDS_LUMINANCE DDPF_LUMINANCE
#define DDS_RGBA DDPF_RGB | DDPF_ALPHAPIXELS
class dxutils
{
public:
	static std::string GetFormatAsString(DXGI_FORMAT fmt)
	{
		return _dxgi_to_string[fmt];
	}

	static DXGI_FORMAT GetFormatFromHeader(DDS_HEADER hdr)
	{
		DDS_PIXELFORMAT pf = hdr.ddspf;
		if (pf.dwRGBBitCount == 32)
		{
			if (pf.dwFlags & DDS_RGBA)
			{
				if (pf.dwRBitMask == 0xff && pf.dwGBitMask == 0xff00 && pf.dwBBitMask == 0xff0000 && pf.dwABitMask == 0xff000000)
					return DXGI_FORMAT_R8G8B8A8_UNORM;
				else if (pf.dwRBitMask == 0xffff && pf.dwGBitMask == 0xffff0000)
					return DXGI_FORMAT_R16G16_UNORM;
				else if (pf.dwRBitMask == 0x3ff && pf.dwGBitMask == 0xffc00 && pf.dwBBitMask == 0x3ff00000)
					return DXGI_FORMAT_R10G10B10A2_UNORM;
			}
			else if (pf.dwFlags & DDS_RGB)
			{
				if (pf.dwRBitMask == 0xffff && pf.dwGBitMask == 0xffff0000)
					return DXGI_FORMAT_R16G16_UNORM;
			}
		}
		else if (pf.dwRGBBitCount == 8)
		{
			if (pf.dwFlags & DDS_ALPHA)
			{
				if (pf.dwABitMask == 0xff)
					return DXGI_FORMAT_A8_UNORM;
			}
		}

		// unsupported
		return DXGI_FORMAT_UNKNOWN;
	}
};